[
["otherSF.html", "9 与其他软件的交互 9.1 一句话Tips 9.2 R语言调用Matlab 9.3 R与Python的无缝对接 9.4 与julia的对接", " 9 与其他软件的交互 9.1 一句话Tips stargazer的一个模版调用： stargazer(regression,type = &#39;text&#39;,out = &quot;../PicTab/cmp.html&quot;,no.space = T,report = c(&#39;vcp&#39;)) report意味着报告变量、系数与p值。 officer: 与微软软件互动的一个包 readstata13包读Stata13以后的数据格式。 R语言调用stata 用RStata包可以从R里面调用stata，不过要先用chooseBinStata()先设置stata的安装路径。 也可以在R的启动环境中进行配置。 注意在启动环境中（即Rprofile.site文件中）配置时，应增加如下一行， options(RStata.StataPath = \"\\\"D:\\\\Program Files (x86)\\\\Stata14\\\\StataMP-64\\\"\") 9.2 R语言调用Matlab Matlab里面的三维画图比R要省事很多。这里探讨一下如何从R调用Matlab的一般步骤。 - 安装R.matlab包。使用writemat(filename,A=A,B=B)把R里面的数据写进Matlab并保存成.mat格式。 - 安装matlabr包。使用run_matlab_script命令来执行一个.m脚本。或者使用R.matlab包里面的evaluate来一个一个地执行matlab命令。或者类似于调用stata： library(matlabr) MatlabCode &lt;- &#39; a = 3; b = a+1; &#39; run_matlab_code(MatlabCode) R语言读取SPSS（中文字符） # 读英文字符 library(foreign) mydata=read.spss(&quot;data.sav&quot;) # 或者如下 library(Hmisc) data=spss.get(&quot;data.sav&quot;) # 读中文字符 library(memisc) data1 = as.data.set(spss.system.file(&quot;data.sav&quot;)) data = as.data.frame(data1) 9.3 R与Python的无缝对接 第一步，首先配置好环境 library(reticulate) use_condaenv(&quot;D:/Anaconda3&quot;) # 安装的python版本环境查看，显示anaconda和numpy的详细信息。放在 # use_condaenv()后，以使配置生效 py_config() py_available()#[1] TRUE #检查您的系统是否安装过Python py_module_available(&quot;pandas&quot;)#检查“pandas”是否安装 第二步，调用有多种方法。我最喜欢这种，就是直接导入python模块，然后用R的风格来调用。此时R里面的美元符号$相当于python里面的“.”符号 ，如， os &lt;- import(&quot;os&quot;) os$getcwd() os$listdir()#您可以使用os包中的listdir（）函数来查看工作目录中的所有文件 numpy &lt;- import(&quot;numpy&quot;) y &lt;- array(1:4, c(2, 2)) y x &lt;- numpy$array(y) x numpy$transpose(x)#将数组进行转置 numpy$linalg$eig(x)#求特征根和特征向量 9.3.1 其他： 当你发现有些包没有，需要安装的时候，可以如下， library(reticulate) # create a new environment conda_create(&quot;r-reticulate&quot;) # install SciPy conda_install(&quot;r-reticulate&quot;, &quot;scipy&quot;) # import SciPy (it will be automatically discovered in &quot;r-reticulate&quot;) scipy &lt;- import(&quot;scipy&quot;) 这是调用时通常需要的代码： library(reticulate) # 可以查你有几个版本的python py_config() # 想使用哪个版本的python use_python(&#39;C:/Users/sheng/AppData/Local/Continuum/anaconda3/python.exe&#39;) # 检查python可不可用 py_available() # 检查模块可不可用 py_module_available(&#39;tushare&#39;) 9.4 与julia的对接 9.4.1 JuliaCall包 感觉此包没有类似reticulate包调用python那么无缝。 在R中执行julia脚本 library(JuliaCall) # 设置存放julia二进制文件的文件夹 julia_setup(JULIA_HOME = &#39;D:/Program Files/Julia-1.4.2/bin&#39;) # 几种主要的调用方式，我把我喜欢的写出来的 julia$command(&quot;a = sqrt(2);&quot;) # 在julia环境中产生了变量a ans &lt;- julia$eval(&quot;a&quot;) # 把变量a的值传给R环境中的ans变量 # 其他的调用方式 julia_command(&quot;a = sqrt(2);&quot;) julia_eval(&quot;a&quot;) #&gt; [1] 1.414214 2 %&gt;J% sqrt #&gt; [1] 1.414214 R与julia互传变量：前面提到的julia_eval可以把julia中的变量传出来，使用julia_assign可以把R中的变量传到julia中去。 julia_assign(&#39;a&#39;,1:5) julia_command(&#39;a&#39;) julia控制台，而且只要你前期julia_setup()了，这个控制台里面就包含了前期运算时的变量 julia_console() # 输入exit 可以退出 # julia&gt; exit 它的函数调用非常吸引人：你甚至可以用R对象作为julia函数的参数 julia_install_package_if_needed(&quot;Optim&quot;) opt &lt;- julia_pkg_import(&quot;Optim&quot;, func_list = c(&quot;optimize&quot;, &quot;BFGS&quot;)) rosenbrock &lt;- function(x) (1.0 - x[1])^2 + 100.0 * (x[2] - x[1]^2)^2 result &lt;- opt$optimize(rosenbrock, rep(0,2), opt$BFGS()) result "]
]
