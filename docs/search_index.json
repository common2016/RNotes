[["otherSF.html", "9 与其他软件的交互 9.1 一句话Tips 9.2 R语言调用Matlab 9.3 R与Python的无缝对接 9.4 与julia的对接 9.5 与C++的对接：Rcpp包", " 9 与其他软件的交互 9.1 一句话Tips 在Mac里面安装万得的R接口，老报错。等报错以后，你看下你存放R包的目录里面有个文件链接00LOCK-WindR/00new/WindR，同时目录下直接还有个WindR。把前者WindR下的全部内容复制到后者目录下即可。 Mac中Jupyter配置R核 # R控制台运行 install.packages(&#39;IRkernel&#39;) # 终端运行 IRkernel::installspec() # 再次打开Jupyter就有R内核了 stargazer的一个模版调用： stargazer(regression,type = &#39;text&#39;,out = &quot;../PicTab/cmp.html&quot;,no.space = T,report = c(&#39;vcp&#39;)) report意味着报告变量、系数与p值。 officer: 与微软软件互动的一个包 readstata13包读Stata13以后的数据格式。 R语言调用stata 用RStata包可以从R里面调用stata，不过要先用chooseBinStata()先设置stata的安装路径。 也可以在R的启动环境中进行配置。 注意在启动环境中（即Rprofile.site文件中）配置时，应增加如下一行， 在windows下，options(RStata.StataPath = \"\\\"D:\\\\Program Files (x86)\\\\Stata14\\\\StataMP-64\\\"\") 在Mac下，options(RStata.StataPath = \"\\\"/Applications/Stata/StataMP.app/Contents/MacOS/stata-mp\\\"\") 或许你还想增加stata的版本设置options(\"RStata.StataVersion\" = 17)。 R语言读取SPSS（中文字符） # 读英文字符 library(foreign) mydata=read.spss(&quot;data.sav&quot;) # 或者如下 library(Hmisc) data=spss.get(&quot;data.sav&quot;) # 读中文字符 library(memisc) data1 = as.data.set(spss.system.file(&quot;data.sav&quot;)) data = as.data.frame(data1) 9.2 R语言调用Matlab 9.2.1 强大的R.matlab包 一般工作流如下： library(R.matlab) Matlab$startServer(matlab = &quot;/Applications/MATLAB_R2021b.app/bin/matlab&quot;) # 启动matlab服务器，可能会较慢 # 创造与matlab交互的客户端对象，并看它的运行状态,此时是关闭的 matlab &lt;- Matlab() print(matlab) # 打开运行 isOpen &lt;- open(matlab) print(matlab) # matlab中运行脚本 evaluate(matlab, &quot;A = 1+2;&quot;, &quot;B = ones(2, 20);&quot;) # 打印A的值 evaluate(matlab, &quot;A&quot;) # 将matlab中的值传到R中 data &lt;- getVariable(matlab, c(&quot;A&quot;, &quot;B&quot;)) # 将R中的值传到matlab中 ABCD &lt;- matrix(rnorm(10000), ncol = 100) setVariable(matlab, ABCD = ABCD) # 关闭与matlab间的连接 close(matlab) 9.2.2 其他的一些小办法 Matlab里面的三维画图比R要省事很多。这里探讨一下如何从R调用Matlab的一般步骤。 - 安装R.matlab包。使用`writemat(filename,A=A,B=B)`把R里面的数据写进Matlab并保存成`.mat`格式。 - 安装matlabr包。使用`run_matlab_script`命令来执行一个`.m`脚本。或者使用`R.matlab`包里面的`evaluate`来一个一个地执行matlab命令。或者类似于调用stata： library(matlabr) MatlabCode &lt;- &#39; a = 3; b = a+1; &#39; run_matlab_code(MatlabCode) 9.3 R与Python的无缝对接 第一步，首先配置好环境 library(reticulate) use_condaenv(&quot;D:/Anaconda3&quot;) # 安装的python版本环境查看，显示anaconda和numpy的详细信息。放在 # use_condaenv()后，以使配置生效 py_config() py_available()#[1] TRUE   #检查您的系统是否安装过Python py_module_available(&quot;pandas&quot;)#检查“pandas”是否安装 第二步，调用有多种方法。我最喜欢这种，就是直接导入python模块，然后用R的风格来调用。此时R里面的美元符号$相当于python里面的“.”符号 ，如， os &lt;- import(&quot;os&quot;) os$getcwd() os$listdir()#您可以使用os包中的listdir（）函数来查看工作目录中的所有文件 numpy &lt;- import(&quot;numpy&quot;) y &lt;- array(1:4, c(2, 2)) y x &lt;- numpy$array(y) x numpy$transpose(x)#将数组进行转置 numpy$linalg$eig(x)#求特征根和特征向量 9.3.1 其他： 当你发现有些包没有，需要安装的时候，可以如下， library(reticulate) # create a new environment conda_create(&quot;r-reticulate&quot;) # install SciPy conda_install(&quot;r-reticulate&quot;, &quot;scipy&quot;) # import SciPy (it will be automatically discovered in &quot;r-reticulate&quot;) scipy &lt;- import(&quot;scipy&quot;) 这是调用时通常需要的代码： library(reticulate) py_config() # 可以查你有几个版本的python # 想使用哪个版本的python use_python(&#39;C:/Users/sheng/AppData/Local/Continuum/anaconda3/python.exe&#39;) # 或者直接在.Rprofile文件中添加一行如：Sys.setenv(RETICULATE_PYTHON = &quot;D:/usr/Anaconda3&quot;) # 以配置路径 # 检查python可不可用 py_available() # 检查模块可不可用 py_module_available(&#39;tushare&#39;) 9.3.2 如何在R中让python找到另外一个安装python包的位置 问题：在R中调用Python时，某个包不存在。于是你用py_install()函数进行了包的安装，默认情况下安装在/Users/yangnay/.virtualenvs/r-reticulate/lib/python3.12/site-packages中，但import()该包时怎么也无法导入。 你首先应该查看一下，当前使用的python是在哪些位置找python包，命令为import sys; sys.path，比如我就发现我的python在如下位置找包： [1] &quot;&quot; [2] &quot;/Library/Frameworks/Python.framework/Versions/3.12/bin&quot; [3] &quot;/Users/yangnay/elements2/RLibrary/reticulate/config&quot; [4] &quot;/Library/Frameworks/Python.framework/Versions/3.12/lib/python312.zip&quot; [5] &quot;/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12&quot; [6] &quot;/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/lib-dynload&quot; [7] &quot;/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/site-packages&quot; [8] &quot;/Users/yangnay/elements2/RLibrary/reticulate/python&quot; 这当然找不到刚才默认位置安装的包了。你要把你刚才默认安装包的那个位置告诉python，让它去那里找。方法就是： 在Python能够找到的位置的site-packages目录中放置一个.pth文件，该文件包含你想要添加到Python路径的目录。 例如，创建一个名为mypackage.pth的文件，内容为”/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/site-packages” 然后将其放置在你的Python环境的site-packages目录中。 9.3.3 r与python的交互控制 library(reticulate) mydata = head(cars, n=15) # 去往python控制台 repl_python() import pandas as pd # 载入数据集 travel = pd.read_excel(“AIR.xlsx”) r.mydata.describe() # 利用r对象调用前面R中生成的变量 # 回到R控制台 exit # 利用py对象调用python中生成的变量 py$travel 9.4 与julia的对接 9.4.1 JuliaCall包 感觉此包没有类似reticulate包调用python那么无缝。 在R中执行julia脚本 library(JuliaCall) # 设置存放julia二进制文件的文件夹 julia_setup(JULIA_HOME = &#39;D:/Program Files/Julia-1.4.2/bin&#39;) # 几种主要的调用方式，我把我喜欢的写出来的 julia$command(&quot;a = sqrt(2);&quot;) # 在julia环境中产生了变量a ans &lt;- julia$eval(&quot;a&quot;) # 把变量a的值传给R环境中的ans变量 # 其他的调用方式 julia_command(&quot;a = sqrt(2);&quot;) julia_eval(&quot;a&quot;) #&gt; [1] 1.414214 2 %&gt;J% sqrt #&gt; [1] 1.414214 R与julia互传变量：前面提到的julia_eval可以把julia中的变量传出来，使用julia_assign可以把R中的变量传到julia中去。 julia_assign(&#39;a&#39;,1:5) julia_command(&#39;a&#39;) julia控制台，而且只要你前期julia_setup()了，这个控制台里面就包含了前期运算时的变量 julia_console() # 输入exit 可以退出 # julia&gt; exit 它的函数调用非常吸引人：你甚至可以用R对象作为julia函数的参数 julia_install_package_if_needed(&quot;Optim&quot;) opt &lt;- julia_pkg_import(&quot;Optim&quot;, func_list = c(&quot;optimize&quot;, &quot;BFGS&quot;)) rosenbrock &lt;- function(x) (1.0 - x[1])^2 + 100.0 * (x[2] - x[1]^2)^2 result &lt;- opt$optimize(rosenbrock, rep(0,2), opt$BFGS()) result 9.5 与C++的对接：Rcpp包 9.5.1 Rcpp引入的C++中的标量、向量和矩阵类 在写C++时任何变量通常需要首先声明类型，标量类型包括double, int, String, bool。 向量类型包括NumericVector, IntegerVector, CharacterVector, LogicalVector。这些类型按我的理解，应该是类，对于类就有对应的方法，比如.size()方法就可以计算这个向量的长度。选取向量元素用[]。 此外也有对应矩阵类型(NumericMatrix, IntegerMatrix, CharacterMatrix, LogicalMatrix)。 选取矩阵元素用()而不是[] .nrow(), .ncol()计算矩阵维度 9.5.2 使用sourceCpp函数 单独的C++文件头应包含： #include &lt;Rcpp.h&gt; using namespace Rcpp; // [[Rcpp::export]] /*** R # 这里可以跑R代码，从而可以简单测试上述C++语言 */ 如何从R语言的list类中提取数据？如果mod是从lm返回的list，提取它的残差同时转化为C++的向量，可用as&lt;NumericVector&gt;(mod[\"residuals\"])。 ### C++代码中调用R函数 这给我们提供了极大的方便。调用方式如下： RObject callWithOne(Function f){ return f(1); } 用Function声明R函数； 用RObject表示R函数返回的类型； 现在R中的函数f就可以在C++中用了； "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
