[["rawR.html", "5 原生的R 5.1 一句话Tips 5.2 容错机制 5.3 整洁运算 5.4 更新R 5.5 大数据的存取 5.6 RStudio-server管理 5.7 平行计算 5.8 类和方法 5.9 打印到文件 5.10 apply函数族 5.11 Linux中的R 5.12 macOS与R 5.13 如何完美复制项目的结果", " 5 原生的R 5.1 一句话Tips cmd+alt+B运行到当前行，cmd+shift+0重启R会话。 比如你自己写了个包，你可能想查看它被安装下载了多少次，代码如下： dlstats::cran_stats(&#39;CHNCapitalStock&#39;) # 给出每个月的下载量 # 或者使用另一个包给出每天的下载量 # devtools::install_github(&quot;metacran/cranlogs&quot;) cran_downloads(&#39;CHNCapitalStock&#39;,from = &#39;2020-06-01&#39;, to = &#39;2021-01-14&#39;) .libPaths()查看R的安装目录 object.size()可以查看某个对象占了多少内存，但一般不准，返回结果偏大。可以使用lobstr::obj_size()来看变量的大小。 do.call(str_fun, args, quote, envir)函数感觉很好用, 第一个参数是字符串函数名，第二个参数是一个list, 它里面元素的名字就是你调用的函数的参数的名字。在某种程度上，它可以替代eval(parse(text = str))的作用。 从本地安装一个源码包： install.packages(&#39;E:\\\\17_HuaDong\\\\NEDatabase\\\\MyRef.Attachments\\\\RForEconometrics/phtt_3.1.2.tar.gz&#39;,type = &#39;source&#39;,repos = NULL) suppressMessages()可以抑制代码抛出的信息等。 +(3,1)与3+1的作用是一样的。这可以推广到其他中缀函数，如%*%等。 写函数时，可以使用...参数，为捕获这个(可能是多个)参数的值，可以用list(...)这个办法。 只显示3位小数： round(0.123456,3) ## [1] 0.123 属性赋值： y &lt;- c(1,2,5,8) attr(y,&#39;my_attribute&#39;) &lt;- &#39;This is a vector&#39; attr(y,&#39;my_attribute&#39;) ## [1] &quot;This is a vector&quot; 但通常给数据框的列赋予一个label的属性，在RStudio中显示数据时，会同时把这个标签显示出来，非常方便。 dt &lt;- data.frame(x = 1:3, y = 6:8) attr(dt$x, &#39;label&#39;) &lt;- &#39;time&#39; remove.packages('dplyr')，卸载已安装的包。 system或shell运行Shell命令。 pkgsearch包的ps函数提供CRAN的关键词搜寻。 detach(package:dplyr)可以去掉加载的包。 foreach包提供循环的平行计算 在jupyter里面安装R，只需在anaconda里面的命令行中（anaconda prompt）输入， conda install -c r r-essentials 工作目录下所有文件名dir() file.copy, file.create, file.remove, file.rename, dir.creat, file.exists, file.info file.rename批量修改文件名 fr = paste(&#39;./加工贸易HS/2016/&#39;,dir(&#39;./加工贸易HS/2016&#39;),sep = &#39;&#39;) to = paste(&#39;./加工贸易HS/2016/hp&#39;,dir(&#39;./加工贸易HS/2016&#39;),sep = &#39;&#39;) file.rename(from = fr,to = to) down.file只要给出第一个参数：网址（包括ftp的）和第二个参数，下载的文件要保存的文件名，就可以直接在网上下载文件。如果中国乱码，记得使用fileEncoding = ’UTF-8’来修正。 getAnywhere(predict.Arima)查看源代码 .rs.restartR()重启一个新的R会话 如何安装已经过期的包？ 点这里找到过期的包，然后下载下来。 用这个命令安装本地的包：install.packages('D:/MSBVAR_0.9-3.tar.gz',repos = NULL, type = 'source') 5.2 容错机制 R中使用tryCatch进行容错。语法如下： tryCatch( expr, error = function(e) { ... }, warning = function(w) { ... }, finally = { ... } ) expr：需要尝试执行的代码。 error：一个函数，当expr中出现错误时会被调用，e是错误对象。 warning：一个函数，当expr中出现警告时会被调用，w是警告对象。 finally：一个表达式，无论是否出现错误或警告，都会在tryCatch执行完成后运行。 一个例子如下， result &lt;- tryCatch( { # 尝试执行的代码 seq.Date(as.Date(&#39;2025-01-10&#39;), as.Date(&#39;2025-01-09&#39;)) }, error = function(e) { # 错误处理代码 message(&quot;发生错误：&quot;, e$message) return(NA) # 返回一个默认值 } ) print(result) 在这个例子中，10 / 0会导致错误，tryCatch会捕获这个错误，并执行error函数中的代码，返回NA。 5.3 整洁运算 在R语言中存在大量整洁运算，比如dplyr::rename(dt, newname = oldname)中oldname就不需要引号括起来。那么如何在自己撰写的函数中进行整洁运算，即如何让函数的参数能够不先求值而直接传递到函数中去。一般有两种做法：一是使用enquo和!!对，二是使用两对花括号{{}}。如下： # enquo, !!的用法 myfunction &lt;- function(data, x, y){ x &lt;- enquo(x) y &lt;- enquo(y) ggplot(data, aes(!!x, !!y)) + geom_points() } # {{}}的用法 myfunction &lt;- function(data, x, y){ ggplot(data, aes({{x}}, {{y}})) + geom_points() } # 数据框中列名用字符串的方法 my_var &lt;- &quot;disp&quot; mtcars %&gt;% summarise(mean = mean(.data[[my_var]])) 另外就是:=符号可以让左边的变量名也能用上整洁运算，一个例子如下： my_function &lt;- function(data, var, suffix = &quot;foo&quot;) { # Use `{{` to tunnel function arguments and the usual glue # operator `{` to interpolate plain strings. data %&gt;% summarise(&quot;{{ var }}_mean_{suffix}&quot; := mean({{ var }})) } 5.4 更新R 在Mac中更新R，你要去R的官网下载最新的R版本然后装上，它会自动覆盖原有的旧R。你可以进一步打开/Library/Frameworks/R.frameworks/versions/在里面删除旧R的残余文件夹。 有个时候升级R以后，载入某些包时报错，你可以用如下命令更新所有的R包，基本都能解决。 update.packages(checkBuilt=TRUE, ask=FALSE) checkBuilt参数是说如果是用以前的R安装的包是不是也算旧包需要更新？ 5.5 大数据的存取 对于大的数据，载入内存运算往往给内存造成很大负担，16G内存的电脑，超过500M，就应该考虑使用一些专用的包来读取加速。 5.5.1 qs包 fst包能高速读取数据框，qs包采用了这个技术，但它还能高速读取列表。用法如下 library(qs) df1 &lt;- data.frame(x = rnorm(5e6), y = sample(5e6), z=sample(letters, 5e6, replace = T)) qsave(df1, &quot;myfile.qs&quot;) df2 &lt;- qread(&quot;myfile.qs&quot;) 5.5.2 SOAR 该包将数据存到硬盘上，然后利用SOAR包进行调用。通常可如下调用 library(SOAR) Store(&quot;some_data&quot;) 这会有如下动作： 在工作目录下创建一个子目录.R_Cache。这个目录是隐藏的，可以通过在RStudio右下角Plane中的Files标签中通过勾选显示隐藏而看到。 对象some_data以.Rdata的形式存储在该子目录中； 对象some_data在全局环境中被删掉； 此时，在该工作目录下，可以像调用全局环境中的变量一样调用some_data。同时还可以用Remove来去掉该变量，用Ls()来查看路径中有哪些变量。 5.6 RStudio-server管理 rstudio-server start #启动 rstudio-server stop #停止 rstudio-server restart #重启 查看运行中R进程 rstudio-server active-sessions 指定PID，停止运行中的R进程 rstudio-server suspend-session &lt;pid&gt; 停止所有运行中的R进程 rstudio-server suspend-all 强制停止运行中的R进程，优先级最高，立刻执行 rstudio-server force-suspend-session &lt;pid&gt; rstudio-server force-suspend-all RStudio Server临时下线，不允许web访问，并给用户友好提示 rstudio-server offline RStudio Server临时上线 rstudio-server online 5.7 平行计算 5.7.1 循环中的平行运算 平行计算中，光使用foreach包是不够的，还需要注册一个平行背景注册，否则foreach包在运算完以后会返回警告： # Warning message: # # executing %dopar% sequentially: no parallel backend registered 平行计算一般的工作流如下： library(doParallel) cl &lt;- parallel::makeCluster(2) doParallel::registerDoParallel(cl) foreach(i=1:3, .pacakages = &#39;tidyverse&#39;) %dopar% sqrt(i) parallel::stopCluster(cl) 要注意，平行计算中，在foreach后的语句中，相当于在每个进程中，重启了一个新环境。因此，如果你要用到foreach外面的变量，则需要把变量、包等都传进去。同时，这些变量如果是向量或者list则不需要特别地指定迭代变量是哪个，程序会自动将它们处理成迭代变量。如果这些变量的长度不一，则迭代时以最少长度的变量为准。一个简单的例子(VARrf::IRFrf_gen)如下： # 传进去了5个变量,nhist, itevar,pmax,s, shockvar，这些变量的长度都是一样的。 picdata &lt;- foreach::foreach(i = 1:nhist,itevar = itevar, pmax = pmax_para,s = s, shockvar = shockvar, .packages = &#39;tidyverse&#39;) %dopar% { devtools::load_all() IRFrf(data = itevar, pmax = pmax, s = s, shockvar = shockvar,histime = i) } 还要注意foreach中有一个参数.export,这个参数的含义很重要。因为在平行环境中是没有任何变量的，要把你当前环境中的变量或函数导入到平行运行的环境中，就要利用.export变量，它以字符串的形式把当前环境变量导入到平行环境中，如.export = c('myvar','myfun')。 5.7.2 apply族的平行版本 library(parallel) # 检查系统有几个核，然后全部利用 cl &lt;- makeCluster(detectCores()) # Windows并行时，每个进程中是没有变量的，所以要把函数或变量导入到每个进程中去 clusterExport(cl,c(&#39;fun1&#39;,&#39;var1&#39;)) # 或者要把某个包导入到进程中去 clusterEvalQ(cl,{ library(randomForestSRC) library(tidyverse) }) %&gt;% invisible() # 并行运算 parLapply(cl, c(&#39;a&#39;,&#39;b&#39;,&#39;c&#39;), FUN) stopCluster(cl) 5.8 类和方法 5.8.1 S3类 # 查看属于一个泛型函数的所有方法： methods(&#39;mean&#39;) ## [1] mean,ANY-method mean,denseMatrix-method mean,sparseMatrix-method ## [4] mean,sparseVector-method mean.Date mean.default ## [7] mean.difftime mean.POSIXct mean.POSIXlt ## [10] mean.quosure* ## see &#39;?methods&#39; for accessing help and source code # 反过来，查看一个类，都有何关联的泛型函数 methods(class = &#39;ts&#39;) ## [1] [ [&lt;- aggregate as.data.frame cbind ## [6] cbind2 coerce cycle diff diffinv ## [11] initialize kernapply kronecker lines Math ## [16] Math2 monthplot na.omit Ops plot ## [21] print rbind2 show slotsFromS3 t ## [26] time window window&lt;- ## see &#39;?methods&#39; for accessing help and source code 创建一个类，很多时候只需在最后返回一个这样的，就可以了， class(foo) &lt;- &#39;myclass&#39; 然后为这个类创建一个泛型函数，只需要两步： # 创建一个类 a &lt;- list() class(a) &lt;- &#39;a&#39; # 第一步：增加一个新的泛型函数。记住，没有搭配该泛型函数的方法，泛型函数是没有用的。 f &lt;- function(x) UseMethod(&#39;f&#39;) # 第二步，为此泛型函数添加方法。关键在于命名规则，属于该泛型函数的方法一定具有类似f.a格式的命名。 # f是泛型函数, a是类,它们用点连起来。 f.a &lt;- function(x) &#39;class a&#39; mean.a &lt;- function(x) &#39;a&#39; # 为已有的泛型函数增加方法 5.9 打印到文件 sink函数：在代码开始前加一行：sink(“output.txt”)，就会自动把结果全部输出到工作文件夹下的output.txt文本文档。这时在R控制台的输出窗口中是看不到输出结果的。代码结束时用sink()切换回来。 示例： sink(&quot;a.txt&quot;) x&lt;-rnorm(100,0,1) mean(x) sink() cat函数：cat('abc','OK!',file = 'a.txt',sep = '\\n',append = T) stargazer函数： stargazer(fit1, fit2, title = &quot;results&quot;, align = F, type = &quot;text&quot;, no.space = TRUE, out = &quot;fit.html&quot;) 5.10 apply函数族 lapply(vector,fun)，可以将函数作用于向量vector的每一个元素上，然后返回一个list。 sapply(vector,fun)的好处在于不是返回一个list，而是返回一个向量或者矩阵。如果fun返回的是一个元素，那么sapply就返回一个向量，如果fun返回的是一个向量，则sapply按列将结果拼接成一个矩阵。 sapply(1:10, function(i) i^2) ## [1] 1 4 9 16 25 36 49 64 81 100 sapply(1:10, function(i) c(i^2,i)) ## [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] ## [1,] 1 4 9 16 25 36 49 64 81 100 ## [2,] 1 2 3 4 5 6 7 8 9 10 apply是我用得最熟的，它是将函数应用到矩阵或数组的行或列上。 mapply是lapply或sapply的多元版本，即它可以同时输入多个向量，如 mapply(function(x,y,z) x*y + y*z + x*z, x = c(1,2,3),y = c(1,2,3), z = c(-1,-2,-3)) ## [1] -1 -4 -9 5.11 Linux中的R 很多时候，对服务器我们没有权限，因此我们只能下载包的源码，然后安装。工作流如下： - 在自己有权限的目录下新建一个目录，比如/data/stage/chenpu/RLib作为包的安装目录，命令为 mkdir /data/stage/chenpu/RLib 将包的源码下载下来，然后命令行安装 R CMD INSTALL /.../mypackage.tar.gz --library=/data/stage/chenpu/RLib 在R跑程序，加载的时候，要注意lib.loc参数， library(zoo, lib.loc = &#39;/data/stage/chenpu/RLib&#39;) 或者修改启动文件.Rprofile，这就不会每次启动R都要重新设置了。 5.11.1 如何修改.Rprofile？ 进入R以后， R.home() # 确定R安装在了哪里 file.edit(file.path(&#39;~&#39;,&#39;.Rprofile&#39;)) # 编辑Rprofile # 此时进入vi界面， 在插入模式下，键入 .libPaths(&#39;/data/stage/chenpu/RLib&#39;) # 再按Esc退出插入模式进入命令行模式，输入`:wq`保存退出。 5.11.2 Ubuntu下安装最新的R 在/etc/apt/sources.list文件中增加软件的镜像源，deb https://cloud.r-project.org/bin/linux/ubuntu bionic-cran40/，也就是增加这样一行。注意后面这个bionic-cran40，它对应着Ubuntu系统下R4.0版本。 更新源： sudo apt-get update 更新的时候往往会报错，说是没有公钥。此时用这个命令增加公钥： sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 6AF0E1940624A220 注意，此处6AF0E1940624A220是你更新源时报错提示的key。 3. 安装： sudo apt-get install r-base 5.12 macOS与R 5.12.1 安装R 在官网下载对应的R，按说明装即可。要注意的是如果是macOS 11即Big Sur以后的版本，要下载对应的R包，否则可能在后期会出问题。比如我在Julia中安装RCall包以便在Julia中调用R，但该包怎么都安装不了，后来发现是R的版本安装错了。然后RStudio下载下来只要拖到Applications里面即可，比较简单。 如果要从源码编译R代码，还需要两个工具Xcode和gfortran。前者在App Store里面免费安装，后者参照R官网指导命令行安装即可(https://mac.r-project.org/tools/),要注意的是： 解压命令tar fxz gfortran-f51f1da0-darwin20.0-arm64.tar.gz -C /意味着把压缩包解压到根目录下，而不是用户目录下。因此，前面加上sudo前缀，否则会解压到用户目录下。 5.12.2 配置R 在R启动前可以执行一些命令，这些命令可以写在.Rprofile文件中，该文件在主目录下。你可以使用file.edit('~/.Rprofile')命令打开，该文件若不存在，会自动创建一个。然后在该文件中写入如下代码以设置默认的R包的存储位置， .libPaths(c(&#39;~/elements/RLibrary&#39;,.libPaths())) 后面加了个.libPaths()是因为以前默认的R包位置已经安装了一些包，这些包也要在搜寻的路径上。 5.13 如何完美复制项目的结果 在写一个项目时，往往对应着当时你调用的各种R包的版本。一年以后，许多包已经更新，可能你当时的代码结果已经无法复制。我们需要管理不同版本的R包。 renv包就是干这个的。工作流如下： renv::init()初始化这个项目，会生产对应该项目的包库文件目录。此时安装包，都是在这个私有库下进行，不影响全局的包库。 renv::snapshot()记下此时包的各个版本。 renv::restore()恢复上一个快照时包库的状态。 "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
